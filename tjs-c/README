C 版 Tiny JS コンパイラ

                                            2013. 11. 01  岩崎

ここにあるものは，C 版 Tiny JS コンパイラ一式であり，以下のファイルがある．

  tjscompiler.c      コンパイラ本体のソース
  Makefile           Makefile

コンパイラの本質的な部分 (生成する命令列) は，高田版を同じ．
ただし，高田版のコンパイラの使い勝手を良くするための改良を加えた．
(Scheme を不要にする，コマンド行引数で入力ファイルを与えるなど．)


必要なもの

  SpiderMonkey 1.6 の include ファイルと library ファイル．

  SpiderMonkey 1.7 でも大体動くが，try ... catch ... finally 構文を含む
  ソースファイルを与えると，構文解析に失敗して死ぬようだ．


ビルドの方法

(1) Makefile を，それぞれの環境に従って (必要に応じて) 変更する．
    変数は次の通り．

     CC              利用するコンパイラ
     INCLUDE_PATH    SpiderMonkey 関連のヘッダファイルのあるディレクトリ
     LIBJS_PATH      SpiderMonkey 関連のライブラリのあるディレクトリ

(2) % make
    とする．問題なければ，これで tjscompiler というオブジェクトが
    できる．


使い方

  高田版は，コンパイラ本体は S 式を出力して，それを別途用意した Scheme
  プログラムで処理して，仮想機械に与えることのできる命令列を生成していた．

  ここにある版では，コンパイラ本体が仮想機械に与える命令列を直接生成する
  ことができる．したがって，Scheme による処理は必要ない．
  しかし互換性を考慮して，-S オプションをつけることにより，高田版のような
  S 式を出力することもできる．
  
  基本的な使い方は

  ./tjscompiler [-S] [js-filename]

  -S オプションは，S 式出力を得たい時に指定する．
  js-filename には Tiny JavaScript のソースファイル名を与える．
  これがなければ標準入力からソースを読む．
  ファイル名に (.js を含む) 拡張子がついていれば，その名前のファイルを
  入力とする．拡張子がなければ，.js を後に補給する．

  出力先は次の通り．
    入力が標準入力の場合
       標準出力
    入力ファイルの場合
       拡張子を .sbc に置換したファイル (-Sを与えなかった場合)
       拡張子を .tbc に置換したファイル (-Sを与えた場合)

  例

     % ./tjscompiler foo
     % ./tjscompiler foo.js
       ともに，入力は foo.js，出力は foo.sbc

     % ./tjscompiler -S foo
     % ./tjscompiler -S foo.js
       ともに，入力は foo.js，出力は foo.tbc  (S式による出力)

     % ./tjscompiler foo.xy
       入力は foo.xy，出力は foo.sbc

     % ./tjscompiler -S foo.xy
       入力は foo.xy，出力は foo.tabc  (S式による出力)


変更履歴

2013 11 01  string命令などのオペランドの文字列を " " で囲むようにした．
            例:  今までは    string 3 abc
                 この版では  string 3 "abc"
            これに伴い，非アスキー文字は \n，\xbf のようなエスケープを
            用いた表現を使うようにした．

2013 08 20  リリース


以上です．
